# https://www.playframework.com/documentation/latest/Configuration

play.i18n.langs = ["en"]

play.filters.hosts {
  allowed = ["localhost", "localhost:9000", ".stakenet.io"]
  allowed += ${?APP_HOST}
}

play.modules.enabled += "io.stakenet.orderbook.modules.ActorsModule"
play.modules.enabled += "io.stakenet.orderbook.modules.ConfigModule"
play.modules.enabled += "io.stakenet.orderbook.modules.ExecutorsModule"
play.modules.enabled += "io.stakenet.orderbook.modules.FeatureFlagsModule"
play.modules.enabled += "io.stakenet.orderbook.modules.OrderMatcherModule"
play.modules.enabled += "io.stakenet.orderbook.modules.PaymentsModule"
play.modules.enabled += "io.stakenet.orderbook.modules.RepositoriesModule"
play.modules.enabled += "io.stakenet.orderbook.modules.TasksModule"
play.modules.enabled += "io.stakenet.orderbook.modules.ChannelsModule"
play.modules.enabled += "io.stakenet.orderbook.modules.FeesModule"
play.modules.enabled += "io.stakenet.orderbook.modules.SchedulersModule"
play.modules.enabled += "io.stakenet.orderbook.modules.DiscordModule"
play.modules.enabled += "io.stakenet.orderbook.modules.ExplorerModule"
play.modules.enabled += "io.stakenet.orderbook.modules.IpInfoModule"
play.modules.enabled += "io.stakenet.orderbook.modules.TradingPairModule"
play.modules.enabled += "io.stakenet.orderbook.modules.ClientsModule"
play.modules.enabled += "io.stakenet.orderbook.modules.LndModule"
play.modules.enabled += "io.stakenet.orderbook.modules.MakerPaymentModule"

play.http {
  secret.key="changeme"
  secret.key=${?PLAY_APPLICATION_SECRET}
}

play.server.akka.terminationTimeout = "15 seconds"

play.filters.enabled += "play.filters.cors.CORSFilter"
play.filters.disabled += "play.filters.csrf.CSRFFilter"

play.filters.cors {
  allowedOrigins = [
    "http://localhost:4200", "https://localhost:4200",
    "http://staging.xsnexplorer.io", "https://staging.xsnexplorer.io",
    "https://xsnexplorer.io",
    "https://stakenet.io"
  ]

  allowedHttpMethods = ["GET", "POST"]
}

db.default {
  driver = "org.postgresql.Driver"
  host = "localhost:5432"
  database = "orderbook"
  username = "postgres"
  password = "postgres"

  host = ${?ORDERBOOK_PSQL_HOST}
  database = ${?ORDERBOOK_PSQL_DATABASE}
  username = ${?ORDERBOOK_PSQL_USERNAME}
  password = ${?ORDERBOOK_PSQL_PASSWORD}

  url = "jdbc:postgresql://"${db.default.host}"/"${db.default.database}
}

play.evolutions {
  autoApply = true

  db.default {
    enabled = true
  }
}

# Number of database connections
# See https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
fixedConnectionPool = 9

play.db {
  prototype {
    hikaricp.minimumIdle = ${fixedConnectionPool}
    hikaricp.maximumPoolSize = ${fixedConnectionPool}
  }
}

# Job queue sized to HikariCP connection pool
database.dispatcher {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor {
    fixed-pool-size = ${fixedConnectionPool}
  }
}

kamon {
  environment.service = "Orderbook"
  apm.api-key = "DEV-KEY-REPLACE-ME" // dev key
  apm.api-key = ${?KAMON_API_KEY}
}

# default timeout was 3 seconds which was not enough for some tests when run on CircleCI
akka.test.single-expect-default = "5.minutes"

lnd {
  LTC {
    host = ""
    port = 10002
    tlsCertificateFile = ""
    macaroonFile = ""
    publicKey = ""
    channelIpAddress =  ""
    channelPort = 10011
    channelMinSize = 275000
    maxSatPerByte = 10
    invoiceUsdLimit = 100

    host = ${?ORDERBOOK_LND_LTC_HOST}
    port = ${?ORDERBOOK_LND_LTC_PORT}
    tlsCertificateFile = ${?ORDERBOOK_LND_LTC_TLS_CERTIFICATE_FILE}
    macaroonFile = ${?ORDERBOOK_LND_LTC_MACAROON_FILE}
    publicKey = ${?ORDERBOOK_LND_LTC_PUBLIC_KEY}
    channelIpAddress = ${?ORDERBOOK_LND_LTC_CHANNEL_IP_ADDRESS}
    channelPort = ${?ORDERBOOK_LND_LTC_CHANNEL_PORT}
    invoiceUsdLimit = ${?ORDERBOOK_LND_LTC_INVOICE_USD_LIMIT}
  }

  BTC {
    host = ""
    port = 10000
    tlsCertificateFile = ""
    macaroonFile = ""
    publicKey = ""
    channelIpAddress = ""
    channelPort = 10012
    channelMinSize = 20000
    maxSatPerByte = 300
    invoiceUsdLimit = 100

    host = ${?ORDERBOOK_LND_BTC_HOST}
    port = ${?ORDERBOOK_LND_BTC_PORT}
    tlsCertificateFile = ${?ORDERBOOK_LND_BTC_TLS_CERTIFICATE_FILE}
    macaroonFile = ${?ORDERBOOK_LND_BTC_MACAROON_FILE}
    publicKey = ${?ORDERBOOK_LND_BTC_PUBLIC_KEY}
    channelIpAddress = ${?ORDERBOOK_LND_BTC_CHANNEL_IP_ADDRESS}
    channelPort = ${?ORDERBOOK_LND_BTC_CHANNEL_PORT}
    invoiceUsdLimit = ${?ORDERBOOK_LND_BTC_INVOICE_USD_LIMIT}
  }

  XSN {
    host = ""
    port = 10384
    tlsCertificateFile = ""
    macaroonFile = ""
    publicKey = ""
    channelIpAddress = ""
    channelPort = 10013
    channelMinSize = 60000
    maxSatPerByte = 10
    invoiceUsdLimit = 100

    host = ${?ORDERBOOK_LND_XSN_HOST}
    port = ${?ORDERBOOK_LND_XSN_PORT}
    tlsCertificateFile = ${?ORDERBOOK_LND_XSN_TLS_CERTIFICATE_FILE}
    macaroonFile = ${?ORDERBOOK_LND_XSN_MACAROON_FILE}
    publicKey = ${?ORDERBOOK_LND_XSN_PUBLIC_KEY}
    channelIpAddress = ${?ORDERBOOK_LND_XSN_CHANNEL_IP_ADDRESS}
    channelPort = ${?ORDERBOOK_LND_XSN_CHANNEL_PORT}
    invoiceUsdLimit = ${?ORDERBOOK_LND_XSN_INVOICE_USD_LIMIT}
  }
}

# assetId is the token's contract address(0x0000000000000000000000000000000000000000 for the chain's native token)
connext {
  WETH {
    publicIdentifier = ""
    host = "http://localhost"
    port = 8005
    chainId = 1337
    assetId = "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
    signerAddress = ""
    withdrawAddress = ""

    publicIdentifier = ${?ORDERBOOK_CONNEXT_WETH_PUBLIC_IDENTIFIER}
    host = ${?ORDERBOOK_CONNEXT_WETH_HOST}
    port = ${?ORDERBOOK_CONNEXT_WETH_PORT}
    chainId = ${?ORDERBOOK_CONNEXT_WETH_CHAIN_ID}
    assetId = ${?ORDERBOOK_CONNEXT_WETH_ASSET_ID}
    signerAddress = ${?ORDERBOOK_CONNEXT_WETH_SIGNER_ADDRESS}
    withdrawAddress = ${?ORDERBOOK_CONNEXT_WETH_WITHDRAW_ADDRESS}
  }

  USDT {
    publicIdentifier = ""
    host = "http://localhost"
    port = 8006
    chainId = 1338
    assetId = "0xdac17f958d2ee523a2206206994597c13d831ec7"
    signerAddress = ""
    withdrawAddress = ""

    publicIdentifier = ${?ORDERBOOK_CONNEXT_USDT_PUBLIC_IDENTIFIER}
    host = ${?ORDERBOOK_CONNEXT_USDT_HOST}
    port = ${?ORDERBOOK_CONNEXT_USDT_PORT}
    chainId = ${?ORDERBOOK_CONNEXT_USDT_CHAIN_ID}
    assetId = ${?ORDERBOOK_CONNEXT_USDT_ASSET_ID}
    signerAddress = ${?ORDERBOOK_CONNEXT_USDT_SIGNER_ADDRESS}
    withdrawAddress = ${?ORDERBOOK_CONNEXT_USDT_WITHDRAW_ADDRESS}
  }

  ETH {
    publicIdentifier = ""
    host = "http://localhost"
    port = 8006
    chainId = 1338
    assetId = "0xdac17f958d2ee523a2206206994597c13d831ec7"
    signerAddress = ""
    withdrawAddress = ""

    publicIdentifier = ${?ORDERBOOK_CONNEXT_ETH_PUBLIC_IDENTIFIER}
    host = ${?ORDERBOOK_CONNEXT_ETH_HOST}
    port = ${?ORDERBOOK_CONNEXT_ETH_PORT}
    chainId = ${?ORDERBOOK_CONNEXT_ETH_CHAIN_ID}
    assetId = ${?ORDERBOOK_CONNEXT_ETH_ASSET_ID}
    signerAddress = ${?ORDERBOOK_CONNEXT_ETH_SIGNER_ADDRESS}
    withdrawAddress = ${?ORDERBOOK_CONNEXT_ETH_WITHDRAW_ADDRESS}
  }

  USDC {
    publicIdentifier = ""
    host = "http://localhost"
    port = 8006
    chainId = 1338
    assetId = "0xdac17f958d2ee523a2206206994597c13d831ec7"
    signerAddress = ""
    withdrawAddress = ""

    publicIdentifier = ${?ORDERBOOK_CONNEXT_USDC_PUBLIC_IDENTIFIER}
    host = ${?ORDERBOOK_CONNEXT_USDC_HOST}
    port = ${?ORDERBOOK_CONNEXT_USDC_PORT}
    chainId = ${?ORDERBOOK_CONNEXT_USDC_CHAIN_ID}
    assetId = ${?ORDERBOOK_CONNEXT_USDC_ASSET_ID}
    signerAddress = ${?ORDERBOOK_CONNEXT_USDC_SIGNER_ADDRESS}
    withdrawAddress = ${?ORDERBOOK_CONNEXT_USDC_WITHDRAW_ADDRESS}
  }
}

featureFlags {
  feesEnabled = false
  feesEnabled = ${?ORDERBOOK_FEES_ENABLED}

  rejectBlacklistedCountries = false
  rejectBlacklistedCountries = ${?ORDERBOK_REJECT_BLACK_LISTED_COUNTRIES}
}

orderFees {
  refundableAfter = "1 day"
  refundableAfter = ${?ORDERBOOK_ORDER_FEES_REFUNDABLE_AFTER}
}

trades {
    swapTimeout = "5 minutes"
    swapTimeout = ${?ORDERBOOK_TRADES_SWAP_TIMEOUT}
}

tradingPairs {
  XSN_BTC {
    enabled = true
    enabled = ${?ORDERBOOK_XSN_BTC_ENABLED}
  }

  XSN_LTC {
    enabled = true
    enabled = ${?ORDERBOOK_XSN_LTC_ENABLED}
  }

  LTC_BTC {
    enabled = true
    enabled = ${?ORDERBOOK_LTC_BTC_ENABLED}
  }

  XSN_WETH {
    enabled = true
    enabled = ${?ORDERBOOK_XSN_WETH_ENABLED}
  }

  XSN_ETH {
    enabled = true
    enabled = ${?ORDERBOOK_XSN_WETH_ENABLED}
  }

  BTC_WETH {
    enabled = true
    enabled = ${?ORDERBOOK_BTC_WETH_ENABLED}
  }

  BTC_USDT {
    enabled = true
    enabled = ${?ORDERBOOK_BTC_USDT_ENABLED}
  }

  ETH_BTC {
    enabled = true
    enabled = ${?ORDERBOOK_ETH_BTC_ENABLED}
  }

  BTC_USDC {
    enabled = true
    enabled = ${?ORDERBOOK_BTC_USDC_ENABLED}
  }

  ETH_USDC {
    enabled = true
    enabled = ${?ORDERBOOK_ETH_USDC_ENABLED}
  }
}

retry {
    initialDelay = "1 second"
    initialDelay = ${?ORDERBOOK_RETRY_INITIAL_DELAY}

    maxDelay = "65 seconds"
    maxDelay = ${?ORDERBOOK_RETRY_MAX_DELAY}
}

discord {
  token = "replace me"
  token = ${?DISCORD_TOKEN}
  enabled = false
  enabled = ${?DISCORD_ENABLED}
  serverName = "Stakenet (XSN)" // this is the discord server where the bot is installed
  serverName = ${?DISCORD_SERVER_NAME} // this is the discord server where the bot is installed
  channelName = "bots" // this is the channel where the bot will send notifications to
  channelName = ${?DISCORD_CHANNEL_NAME} // this is the channel where the bot will send notifications to

}

explorer {
  urlApi = "https://xsnexplorer.io/api"
  urlApi = ${?EXPLORER_URL_API}
}

ipinfo {
  token = "8af2df3b6dafc7"
  token = ${?IPINFO_TOKEN}

  urlApi = "https://ipinfo.io"
  urlApi = ${?IPINFO_URL_API}
}

channelRental {
    maxDuration = "7 days"
    minDuration = "1 hour"
    maxCapacityUsd = 10000
    minCapacityUsd = 5
    maxOnChainFeesUsd = 6
    connextHubAddress = "" # Address where the contract deployment fee must be paid for connext rentals
    connextChannelContractFee = "0" # Amount that needs to be paid for the contract deployment fee for connext rentals

    maxDuration = ${?CHANNEL_RENTAL_MAX_DURATION}
    minDuration = ${?CHANNEL_RENTAL_MIN_DURATION}
    maxCapacityUsd = ${?CHANNEL_RENTAL_MAX_CAPACITY_USD}
    minCapacityUsd = ${?CHANNEL_RENTAL_MIN_CAPACITY_USD}
    maxOnChainFeesUsd = ${?CHANNEL_RENTAL_MAX_ON_CHAIN_FEES_USD}
    connextHubAddress = ${?CHANNEL_RENTAL_CONNEXT_HUB_ADDRESS}
    connextChannelContractFee = ${?CHANNEL_RENTAL_CONNEXT_CHANNEL_CONTRACT_FEE}
}

eth {
  url = "http://localhost:8545"

  url = ${?ETH_NODE_URL}
}
